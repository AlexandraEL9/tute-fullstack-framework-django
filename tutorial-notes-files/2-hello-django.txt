GETTING SET up

Terminal command update
Since this video was created Django have introduced a new version that will be automatically installed if you use the command in the video.

To ensure that you get the a version of django that will work while following these videos, instead of the command pip3 install django, please use this:

pip3 install 'django<4'

Django 3.2 is the LTS (Long Term Support) version of Django and is therefore preferable to use over the newest Django 4

Hiding environment variables
In these videos, Chris does not hide his environment variables, as he doesn't push his code until the very end, right before deployment.

We recommend that you do create and hide your environment variables so you can push early and often, as taught in previous lessons. Use the env.py file as you've seen before, and make sure this is added to .gitignore as demonstrated before.

In case you need a reminder on how to do this, have a look at this link (around 1:20 in the video) or at this cheatsheet from one of our tutors, James.


in order to get up and running with Django we're going to use a cloud-based
development tool to help you get started we've created a GitHub repository that
contains all the requirements you'll need to set up a new Django project in to use it just go to the address at the
top of the screen here and click on use this template give your repository a name I'll call mine CI full stack Frameworks hello Django
give it a description if you prefer and then click on create repository from template once your repository has been created
while we're waiting for create our workspace it's worth mentioning that all that's happening right now is files in the repository you just created as
configuration files to install all the
requirements that this project will need
so you should feel free to dig through
these files and try to understand how
they work but know that it's not a
requirement in order to pass this course
it's just always a good idea to
understand how things work under the
hood

now that that's done we've got our
workspace up and running and we need to
install Django itself to do this we're
going to use a tool called pip and pip
is a recursive acronym that stands for
pip installs packages and it's widely
accepted as the industry standard tool
for installing python packages behind
the scenes pip is connected to the
python package index which is a central
repository for tens of thousands of
different python packages and utilities
so we can use pip to install all kinds
of useful tools that are written in
Python and that includes Django to do
this let's type pip 3 install Django
and we'll see that Django is downloaded
from the python package index and
installed here
notice that we typed pip 3 by the way
when installing this because we want to
install Django for python versions 3 and
using only pip would install it for
python version 2.
before we continue it's useful to know
what it actually means when Django or
any package for that matter is installed
in a literal sense what pip did was
download a bunch of python files from
the python package index and copy them
into a directory here in our workspace
so now that we've got Django installed
we're ready to create our first Django
project 

Django comes with a built-in
admin command for things like starting
projects and other core functionality so
let's use that to create a project
we'll type 
                                django-admin startproject django_todo .
and we'll call this project Django
underscore to do
and put a dot at the end of this command
this will signify that we want to create
this project in the current directory
if we look in the file explorer now
we'll see we have two new items we've
got Django to do and manage.pi this is
our project directory the Django to do
folder and manage.pi is a management
utility we'll need throughout the
project if we open the Django to do
folder there's an init.pi file which was
automatically created to tell our
project that this is a directory we can
import from
we've also got three key files in here
settings dot pi
urls.pi and whiskey dot pi
settings.pi contains the global settings
for our entire Django project so things
like whether we want to show debug
information when errors happen and
things like where our HTML templates are
located in which database we're going to
connect to these are all controlled in
the settings.pi file
urls.pi contains the routing information
that allows our users to type a specific
URL into their address bar and hit a
specific python function so this is
analogous to app.root in flask and
finally we have whizkey.pi which
contains the code that allows our web
server to communicate with our python
application
and that's it that's all we need to
start a new Django project in order to
run our project we can use that
manage.pi utility by typing python3
manage.pi run server
this will tell us that a service is
listening on Port 8000 but it's not
exposed so we will expose that and then
click on open browser
and there we go the install worked
successfully congratulations we have
created our first Django project


urls

In the last video we created a django project.
And looked at the files that are automatically generated for all new django projects.
These files were created by the start project command which comes with the django admin utility.
And include manage.py.
As well as the files that were created for us in our project directory.
Which in our case is called django_todo
When we ran our project for the first time using the python3 manage.py runserver command.
You might have noticed that a couple of other new items were automatically generated.
The pycache directory which contains compiled python code.
And the more important one here which is db.sqlite3.
This file will act as our database for the project.
So you want to be really careful not to delete or change this file in any way.
Since doing so will cause a lot of problems with our project.
And most likely make any data that we've put into the database unrecoverable.
With that said let's talk a bit more about how Django works.
Django projects are organized into small components called apps.
You can think of an app as a reusable self-contained collection of code.
That can be passed around from project to project in order to speed up development time.
So if you need an authentication system for example that handles logging in
logging out password resets and so on.
Rather than build your own you could use a Django app. And simply install it into your project.
Almost everything that we do in Django is going to revolve around these apps.
So let's create one now using the manage.py startapp command.
Since we're going to build a to-do list. Let's create an app called todo
To do that we can type python3 manage.py startapp todo
You'll see this creates another folder called todo in the file explorer.
And if we open that folder we'll see a number of other items
We'll get to all of these eventually but for now we're going to focus on
only one of them and that file is views.pi
If we want to build a todo list web application.
The first thing that we obviously need to be able to do is render some sort of
web page
You might recall from the intro video to this module that the views in the model
view template design pattern.
Are the mechanism by which users on the front end of our app can communicate
with the back end where the data lives.
In our case, that data is going to be our to-do items.
So we need to render some sort of an interface that allows our users to interact with those items
Just to demonstrate how this is going to work.
Let's define a simple python function in views.py called say_hello
And literally all this python function is going to do.
Is take an http request from the user and return an http response
to the user that says hello
And that's it. We're gonna need to import HttpResponse from the Django shortcuts
which is built into Django.
So we're going to import that here. And we'll talk more about this later.
But for now just go ahead and import it. And that's it.
So our python function is done.
And it should say hello.
But how do we make this function available to the web browser.
The answer is we do it through urls.py which we spoke about briefly in the last video.
In order to bring the pieces together here let's go to urls.py. And before we do anything else
We know that we're going to need our python function from the views file.
So let's import that right here at the top. By typing from todo.views import say_hello
This is going to allow us to use the say_hello function inside of the urls file.
Once that's done all that we need to do is define the url that's actually going to
trigger the say hello function and return the http response to the browser.
To do that we use the built-in path function which typically takes three arguments.
It takes the url that the user is going to type in. In our case we're going to say hello.
It takes the view function that it's going to return.
Which is our say_hello function.
And it takes a name parameter which we'll get to a bit later but for right now we'll just call it hello
And that's it that's all it takes. So if we go ahead and save this file now.
Jump down to our terminal and type python3 manage.py runserver
to start our Django application.
We'll see we have the service running now. And we get a service available on port 8000
We can open the browser.
And we get page not found why. Because we haven't typed /hello
At the end of the url
And there we go. There's our hello function saying hello to the browser.


templates
In the previous lesson we demonstrated the basic functionality of a django web application.
This included writing a simple Python function in views.py
that returns an HTTP response saying hello to the browser.
And then connecting that Python function to a URL. Using the path function in urls.py.
Let's say for instance that instead of just rendering a string though
you wanted to render a heading in a paragraph of text.
You might think that we could do something simple like this.
Where we just write actual HTML.
If you put a heading in here and say hello. And then jump to the end and put a paragraph of text.
This is a paragraph.
save it.
And you would be right we actually could do that.
If we run the server using python3 manage.py runserver.
Click on open ports
Then open browser. And go to our hello URL
You'll see that we actually do get valid legitimate HTML in this response.
But you can probably see how this would become really difficult to maintain
when we start dealing with JavaScript and CSS and lots of HTML content.
So to solve this problem Django provides a templating system which allows us
to create HTML files in a template directory inside of each app.
And then we render those templates with our Python functions instead of rendering
simple HTTP responses or long drawn-out strings of HTML like this.
To get our app really started we're going to go to the to-do app folder.
Right-click and create a templates folder inside of this.
Then inside that templates folder we'll create another folder called todo.
And inside of the todo folder create a file called todo_list.html
and this is going to act as our first template.
Now this folder structure here might seem a bit awkward and redundant at first.
But there's actually a good reason for it. The reason that we're creating this
secondary todo folder inside the templates directory
is because when Django looks for templates inside of these apps
it will always return the first one that it finds.
So by separating it into a folder that matches its app name.
We can ensure that we're getting the right template even if there's another template
of the same name in a different app.
With that done let's go to the todo_list.html template.
And if you simply type HTML here and arrow down to the html5 item and press enter
this will generate the basic boilerplate for an html5 file. So this is just a gitpod shortcut
Now in the body of the HTML file we can add some real actual HTML
So let's create a heading.
And just say things I need to do. And then save this file.
The next thing we need to do is update our view function.
So that instead of returning this long string of HTML
It returns our template instead.
We can accomplish that using the render function which was imported into
this views.py file when we created our app originally.
The render function takes an HTTP request and a template name as it's two arguments
And it actually returns an HTTP response like this. which renders that template.
So instead of returning this HTTP response let's return render.
Give it the request. And then in quotes we will give it
todo/todo_list.html
This is basically just a shortcut to writing a really long HTTP response filled with lots of HTML
Instead of writing all that HTML as a string in Python
We can write it in an actual HTML file and pass it to the render function to let Django do the work.
Now that that's done let's just rename our function to something a little bit more applicable.
Like maybe get_todo_list
And get rid of this HTTP response import since we don't need it anymore.
I'll save that.
And now we need to head over to urls.py and change a couple of things around here
First of all this hello URL is actually kind of annoying
because when we launched the project without that URL we get the page not found error
that you've seen at the beginning of this video and the end of the last one.
It also doesn't really apply to what we're doing so I'm gonna actually wipe it out completely.
And instead, I'm gonna replace it with just an empty string.
This means that we don't need to specify any particular URL in order to hit that Python function
so this is gonna act as our home page.
I'm also gonna update the view function that this path returns to our new get_todo_list function
And I'm gonna rename it so that the name matches the function it returns.
So we'll change this to get to do list as well.
Since this is our home page we could also call this something like home.
but just to keep things clear and consistent for now we're gonna leave it like this.
We also need to update the import since we're not using the say hello function anymore.
So let's just wipe that out and replace it with get_todo_list.
And save that.
And the final thing that we need to do to finish this up is to move to Settings.py
And add our to-do app to the list of installed apps.
And this is going to allow Jango to know to look inside of that app folder for a templates directory.
If we now run our app
Using the Python3, we actually don't need to rerun it because it's already running.
If we just go up to this tab and refresh.
We will now get a page not found on the hello URL
Because we've removed that. But if we remove the hello URL
We now get our new HTML template things I need to do.
And we are ready to really start digging into what Jango can do over the next few lessons.
